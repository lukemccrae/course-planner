// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Start
    group={
      Object {
        "name": "group",
        "timers": Array [
          Object {
            "id": 1,
            "name": "name",
          },
        ],
      }
    }
    timeFormat={
      [MockFunction] {
        "calls": Array [
          Array [
            undefined,
            "str",
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <ForwardRef
          active={false}
          disabled={false}
          onClick={[Function]}
          type="button"
          variant="primary"
        >
          Start
        </ForwardRef>,
        <Modal
          ariaHideApp={true}
          bodyOpenClassName="ReactModal__Body--open"
          closeTimeoutMS={0}
          contentLabel="Example Modal"
          isOpen={false}
          onAfterOpen={[Function]}
          onRequestClose={[Function]}
          parentSelector={[Function]}
          portalClassName="ReactModalPortal"
          role="dialog"
          shouldCloseOnEsc={true}
          shouldCloseOnOverlayClick={false}
          shouldFocusAfterRender={true}
          shouldReturnFocusAfterClose={true}
          style={
            Object {
              "content": Object {
                "bottom": "auto",
                "left": "50%",
                "marginRight": "-40%",
                "right": "auto",
                "top": "50%",
                "transform": "translate(-50%, -50%)",
                "width": "70%",
              },
            }
          }
        >
          <div
            className="startNav"
          >
            <button
              aria-label="Close"
              className="close"
              onClick={[Function]}
              type="button"
            >
              <span
                aria-hidden="true"
              >
                ×
              </span>
            </button>
            <ForwardRef
              fluid={false}
            >
              <ForwardRef
                className="countdownDisplay"
                noGutters={false}
              >
                <ForwardRef>
                  name
                </ForwardRef>
                <ForwardRef>
                  <Countdown
                    autoStart={true}
                    controlled={false}
                    date={NaN}
                    daysInHours={false}
                    intervalDelay={1000}
                    precision={0}
                    zeroPadTime={2}
                  >
                    <Completionist
                      nextTimer={[Function]}
                    />
                  </Countdown>
                </ForwardRef>
              </ForwardRef>
            </ForwardRef>
          </div>
        </Modal>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "active": false,
          "children": "Start",
          "disabled": false,
          "onClick": [Function],
          "type": "button",
          "variant": "primary",
        },
        "ref": null,
        "rendered": "Start",
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "defaultProps": Object {
            "active": false,
            "disabled": false,
            "type": "button",
            "variant": "primary",
          },
          "displayName": "Button",
          "render": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "ariaHideApp": true,
          "bodyOpenClassName": "ReactModal__Body--open",
          "children": <div
            className="startNav"
          >
            <button
              aria-label="Close"
              className="close"
              onClick={[Function]}
              type="button"
            >
              <span
                aria-hidden="true"
              >
                ×
              </span>
            </button>
            <ForwardRef
              fluid={false}
            >
              <ForwardRef
                className="countdownDisplay"
                noGutters={false}
              >
                <ForwardRef>
                  name
                </ForwardRef>
                <ForwardRef>
                  <Countdown
                    autoStart={true}
                    controlled={false}
                    date={NaN}
                    daysInHours={false}
                    intervalDelay={1000}
                    precision={0}
                    zeroPadTime={2}
                  >
                    <Completionist
                      nextTimer={[Function]}
                    />
                  </Countdown>
                </ForwardRef>
              </ForwardRef>
            </ForwardRef>
          </div>,
          "closeTimeoutMS": 0,
          "contentLabel": "Example Modal",
          "isOpen": false,
          "onAfterOpen": [Function],
          "onRequestClose": [Function],
          "parentSelector": [Function],
          "portalClassName": "ReactModalPortal",
          "role": "dialog",
          "shouldCloseOnEsc": true,
          "shouldCloseOnOverlayClick": false,
          "shouldFocusAfterRender": true,
          "shouldReturnFocusAfterClose": true,
          "style": Object {
            "content": Object {
              "bottom": "auto",
              "left": "50%",
              "marginRight": "-40%",
              "right": "auto",
              "top": "50%",
              "transform": "translate(-50%, -50%)",
              "width": "70%",
            },
          },
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <button
                aria-label="Close"
                className="close"
                onClick={[Function]}
                type="button"
              >
                <span
                  aria-hidden="true"
                >
                  ×
                </span>
              </button>,
              <ForwardRef
                fluid={false}
              >
                <ForwardRef
                  className="countdownDisplay"
                  noGutters={false}
                >
                  <ForwardRef>
                    name
                  </ForwardRef>
                  <ForwardRef>
                    <Countdown
                      autoStart={true}
                      controlled={false}
                      date={NaN}
                      daysInHours={false}
                      intervalDelay={1000}
                      precision={0}
                      zeroPadTime={2}
                    >
                      <Completionist
                        nextTimer={[Function]}
                      />
                    </Countdown>
                  </ForwardRef>
                </ForwardRef>
              </ForwardRef>,
            ],
            "className": "startNav",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "aria-label": "Close",
                "children": <span
                  aria-hidden="true"
                >
                  ×
                </span>,
                "className": "close",
                "onClick": [Function],
                "type": "button",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "aria-hidden": "true",
                  "children": "×",
                },
                "ref": null,
                "rendered": "×",
                "type": "span",
              },
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <ForwardRef
                    className="countdownDisplay"
                    noGutters={false}
                  >
                    <ForwardRef>
                      name
                    </ForwardRef>
                    <ForwardRef>
                      <Countdown
                        autoStart={true}
                        controlled={false}
                        date={NaN}
                        daysInHours={false}
                        intervalDelay={1000}
                        precision={0}
                        zeroPadTime={2}
                      >
                        <Completionist
                          nextTimer={[Function]}
                        />
                      </Countdown>
                    </ForwardRef>
                  </ForwardRef>,
                ],
                "fluid": false,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": "1",
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <ForwardRef>
                        name
                      </ForwardRef>,
                      <ForwardRef>
                        <Countdown
                          autoStart={true}
                          controlled={false}
                          date={NaN}
                          daysInHours={false}
                          intervalDelay={1000}
                          precision={0}
                          zeroPadTime={2}
                        >
                          <Completionist
                            nextTimer={[Function]}
                          />
                        </Countdown>
                      </ForwardRef>,
                    ],
                    "className": "countdownDisplay",
                    "noGutters": false,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "name",
                      },
                      "ref": null,
                      "rendered": "name",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "displayName": "Col",
                        "render": [Function],
                      },
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": <Countdown
                          autoStart={true}
                          controlled={false}
                          date={NaN}
                          daysInHours={false}
                          intervalDelay={1000}
                          precision={0}
                          zeroPadTime={2}
                        >
                          <Completionist
                            nextTimer={[Function]}
                          />
                        </Countdown>,
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "autoStart": true,
                          "children": <Completionist
                            nextTimer={[Function]}
                          />,
                          "controlled": false,
                          "date": NaN,
                          "daysInHours": false,
                          "intervalDelay": 1000,
                          "precision": 0,
                          "zeroPadTime": 2,
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "class",
                          "props": Object {
                            "nextTimer": [Function],
                          },
                          "ref": null,
                          "rendered": null,
                          "type": [Function],
                        },
                        "type": [Function],
                      },
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "displayName": "Col",
                        "render": [Function],
                      },
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "defaultProps": Object {
                      "noGutters": false,
                    },
                    "render": [Function],
                  },
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "defaultProps": Object {
                  "fluid": false,
                },
                "displayName": "Container",
                "render": [Function],
              },
            },
          ],
          "type": "div",
        },
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <ForwardRef
            active={false}
            disabled={false}
            onClick={[Function]}
            type="button"
            variant="primary"
          >
            Start
          </ForwardRef>,
          <Modal
            ariaHideApp={true}
            bodyOpenClassName="ReactModal__Body--open"
            closeTimeoutMS={0}
            contentLabel="Example Modal"
            isOpen={false}
            onAfterOpen={[Function]}
            onRequestClose={[Function]}
            parentSelector={[Function]}
            portalClassName="ReactModalPortal"
            role="dialog"
            shouldCloseOnEsc={true}
            shouldCloseOnOverlayClick={false}
            shouldFocusAfterRender={true}
            shouldReturnFocusAfterClose={true}
            style={
              Object {
                "content": Object {
                  "bottom": "auto",
                  "left": "50%",
                  "marginRight": "-40%",
                  "right": "auto",
                  "top": "50%",
                  "transform": "translate(-50%, -50%)",
                  "width": "70%",
                },
              }
            }
          >
            <div
              className="startNav"
            >
              <button
                aria-label="Close"
                className="close"
                onClick={[Function]}
                type="button"
              >
                <span
                  aria-hidden="true"
                >
                  ×
                </span>
              </button>
              <ForwardRef
                fluid={false}
              >
                <ForwardRef
                  className="countdownDisplay"
                  noGutters={false}
                >
                  <ForwardRef>
                    name
                  </ForwardRef>
                  <ForwardRef>
                    <Countdown
                      autoStart={true}
                      controlled={false}
                      date={NaN}
                      daysInHours={false}
                      intervalDelay={1000}
                      precision={0}
                      zeroPadTime={2}
                    >
                      <Completionist
                        nextTimer={[Function]}
                      />
                    </Countdown>
                  </ForwardRef>
                </ForwardRef>
              </ForwardRef>
            </div>
          </Modal>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "active": false,
            "children": "Start",
            "disabled": false,
            "onClick": [Function],
            "type": "button",
            "variant": "primary",
          },
          "ref": null,
          "rendered": "Start",
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": Object {
              "active": false,
              "disabled": false,
              "type": "button",
              "variant": "primary",
            },
            "displayName": "Button",
            "render": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "ariaHideApp": true,
            "bodyOpenClassName": "ReactModal__Body--open",
            "children": <div
              className="startNav"
            >
              <button
                aria-label="Close"
                className="close"
                onClick={[Function]}
                type="button"
              >
                <span
                  aria-hidden="true"
                >
                  ×
                </span>
              </button>
              <ForwardRef
                fluid={false}
              >
                <ForwardRef
                  className="countdownDisplay"
                  noGutters={false}
                >
                  <ForwardRef>
                    name
                  </ForwardRef>
                  <ForwardRef>
                    <Countdown
                      autoStart={true}
                      controlled={false}
                      date={NaN}
                      daysInHours={false}
                      intervalDelay={1000}
                      precision={0}
                      zeroPadTime={2}
                    >
                      <Completionist
                        nextTimer={[Function]}
                      />
                    </Countdown>
                  </ForwardRef>
                </ForwardRef>
              </ForwardRef>
            </div>,
            "closeTimeoutMS": 0,
            "contentLabel": "Example Modal",
            "isOpen": false,
            "onAfterOpen": [Function],
            "onRequestClose": [Function],
            "parentSelector": [Function],
            "portalClassName": "ReactModalPortal",
            "role": "dialog",
            "shouldCloseOnEsc": true,
            "shouldCloseOnOverlayClick": false,
            "shouldFocusAfterRender": true,
            "shouldReturnFocusAfterClose": true,
            "style": Object {
              "content": Object {
                "bottom": "auto",
                "left": "50%",
                "marginRight": "-40%",
                "right": "auto",
                "top": "50%",
                "transform": "translate(-50%, -50%)",
                "width": "70%",
              },
            },
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <button
                  aria-label="Close"
                  className="close"
                  onClick={[Function]}
                  type="button"
                >
                  <span
                    aria-hidden="true"
                  >
                    ×
                  </span>
                </button>,
                <ForwardRef
                  fluid={false}
                >
                  <ForwardRef
                    className="countdownDisplay"
                    noGutters={false}
                  >
                    <ForwardRef>
                      name
                    </ForwardRef>
                    <ForwardRef>
                      <Countdown
                        autoStart={true}
                        controlled={false}
                        date={NaN}
                        daysInHours={false}
                        intervalDelay={1000}
                        precision={0}
                        zeroPadTime={2}
                      >
                        <Completionist
                          nextTimer={[Function]}
                        />
                      </Countdown>
                    </ForwardRef>
                  </ForwardRef>
                </ForwardRef>,
              ],
              "className": "startNav",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "aria-label": "Close",
                  "children": <span
                    aria-hidden="true"
                  >
                    ×
                  </span>,
                  "className": "close",
                  "onClick": [Function],
                  "type": "button",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "aria-hidden": "true",
                    "children": "×",
                  },
                  "ref": null,
                  "rendered": "×",
                  "type": "span",
                },
                "type": "button",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <ForwardRef
                      className="countdownDisplay"
                      noGutters={false}
                    >
                      <ForwardRef>
                        name
                      </ForwardRef>
                      <ForwardRef>
                        <Countdown
                          autoStart={true}
                          controlled={false}
                          date={NaN}
                          daysInHours={false}
                          intervalDelay={1000}
                          precision={0}
                          zeroPadTime={2}
                        >
                          <Completionist
                            nextTimer={[Function]}
                          />
                        </Countdown>
                      </ForwardRef>
                    </ForwardRef>,
                  ],
                  "fluid": false,
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": "1",
                    "nodeType": "function",
                    "props": Object {
                      "children": Array [
                        <ForwardRef>
                          name
                        </ForwardRef>,
                        <ForwardRef>
                          <Countdown
                            autoStart={true}
                            controlled={false}
                            date={NaN}
                            daysInHours={false}
                            intervalDelay={1000}
                            precision={0}
                            zeroPadTime={2}
                          >
                            <Completionist
                              nextTimer={[Function]}
                            />
                          </Countdown>
                        </ForwardRef>,
                      ],
                      "className": "countdownDisplay",
                      "noGutters": false,
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": "name",
                        },
                        "ref": null,
                        "rendered": "name",
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "displayName": "Col",
                          "render": [Function],
                        },
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": <Countdown
                            autoStart={true}
                            controlled={false}
                            date={NaN}
                            daysInHours={false}
                            intervalDelay={1000}
                            precision={0}
                            zeroPadTime={2}
                          >
                            <Completionist
                              nextTimer={[Function]}
                            />
                          </Countdown>,
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "class",
                          "props": Object {
                            "autoStart": true,
                            "children": <Completionist
                              nextTimer={[Function]}
                            />,
                            "controlled": false,
                            "date": NaN,
                            "daysInHours": false,
                            "intervalDelay": 1000,
                            "precision": 0,
                            "zeroPadTime": 2,
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "class",
                            "props": Object {
                              "nextTimer": [Function],
                            },
                            "ref": null,
                            "rendered": null,
                            "type": [Function],
                          },
                          "type": [Function],
                        },
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "displayName": "Col",
                          "render": [Function],
                        },
                      },
                    ],
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "defaultProps": Object {
                        "noGutters": false,
                      },
                      "render": [Function],
                    },
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "defaultProps": Object {
                    "fluid": false,
                  },
                  "displayName": "Container",
                  "render": [Function],
                },
              },
            ],
            "type": "div",
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
