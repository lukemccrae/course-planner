
//joey nolans 1
let timeNolans1 = [1023, 1190, 1442, 2270, 1376, 1579, 1277, 1650, 1767, 1609, 1063, 668, 621, 627, 854, 1147, 1242, 1996, 2810, 2118, 1342, 1095, 740, 766, 752, 669, 705, 824, 893,1102, 1412, 1647, 1896, 3230, 1379, 1675, 1995, 3974, 2692, 1942, 2044, 2481,1881, 1443, 3147, 3327, 1658];
let vertNolans1 = [658.7926719999996, 874.6719439999997, 1064.9606640000002, 1432.086659999999, -59.05511999999908, -1249.6719560000001, -970.1443879999988, 761.4829639999989, 1191.929172, 589.8950320000004, -1684.0551720000003, -1134.5144720000008, -638.7795479999986, -310.36746400000084, -690.2887359999986, -124.01575200000116, 693.5695759999999, 735.5643280000004, 1340.22314, 1463.582723999998, -118.76640799999768, -1369.4226160000017, -1259.1863919999978, -936.6798200000012, -132.54593600000044, -28.871392000000924, -484.5800679999993, -489.5013280000003, 31.496064000000842, 287.72966799999995, 336.614184, 827.755932, 504.2651079999996, 885.4987160000001, 1230.3150000000005, 889.1076400000002, -1166.994788, -1562.9921759999997, -638.4514639999998, 1103.018408, 1402.5590999999986, 860.5643320000017, -916.3386120000014, 332.3490920000004, 913.0577720000001, -637.4672119999996, -1583.0053000000007, -401.90289999999914, 1031.8241799999996, 1515.0919119999999, -433.398964]

//joe azt day 6
let timeAzt6 = [
    1226, 1033, 1174, 1162,  789, 744,  811,  947,  786,
    1082,  877,  930, 1229, 1200, 894,  779,  873, 1013,
     823,  700,  930,  780,  879, 822,  762,  991,  915,
     942,  911, 2035, 1348,  921, 782,  953, 1007, 1384,
    1182, 1189, 1170,  970,  913, 920,  858,  985,  972,
     995,  983,  876, 1771,  954, 873,  896,  837,  915,
     665,  740,  890,  889,  966, 972, 1181,  948,  956,
     812,  824,  881, 1006
  ]

  let vertAzt6 = [
    -230,  -46,  548,  144, -167,  -59, -121,  354, -174,
    -407,  -20,   85, -554,  640,  -33, -289,  -52,  446,
    -463, -545, -249, -335, -308,  -49, -239,  -49, -210,
     -49,  -36,  154,  817,  187, -243,   -7,  400,  410,
     525,  453,  535,  131,  144,   85, -157,  128,   85,
    -302,    3,   -7,  148,   -7,   85,   69,   39,  161,
    -348, -285,   92,  131, -302, -295, -581, -381,  -85
  ]


  let timeAzt2 = [
    781,  732, 832, 731, 682, 688, 767, 790, 998,
    836, 1080, 893, 632, 633, 656, 654, 683, 612,
    645,  714, 692, 610, 665, 836, 785, 742, 929,
    666,  702, 765, 783, 786, 659, 618, 667, 672,
    762,  784, 765, 772, 804, 844, 811, 755, 678,
    611,  688, 792, 644, 664, 726, 655, 663, 707,
    788,  717, 732, 811, 737, 814, 813, 821, 891
  ]
  let vertAzt2 = [
      66, -105, 121,  -39, -128,  105,  171,  187,  561,
     210,  577,  16, -548, -108,  -39,   -7, -121, -148,
    -118,   43,  79, -249,  -92,  256,  161,  -20,  341,
    -213, -230, -92,   33,  141, -115, -190, -269,  -72,
     -23,  -43, -36,  -56,   52,   66, -135, -131, -108,
    -174,  -66,  85, -167, -105,    3,  -98, -118,  -20,
      36,  -16, -69,  -85, -108,  -49,   46,   69,  144,
    -239
  ]

  let timeViaAlpina2 = [
    793,  650,  606,  701,  773, 828,  603,  727,
   1316,  801,  615,  766,  637, 692,  660,  616,
    740,  997,  838,  737,  726, 805,  865,  660,
    713,  736,  656,  614,  705, 746,  894, 1700,
   1235, 1396,  808,  855,  897, 857, 1125,  749,
    905, 1258, 1247, 1631, 1247, 860, 1146, 1140,
    926, 1232,  882
 ]
 let vertViaAlpina2 = [
    -62,   16,  -32,  164, -542, -640, -13,  109,
   1155,  253, -335,  220,  145,  334, -95, -506,
   -128,  604,  292, -348,  -59,   86, 354,  -13,
   -364, -279,   27, -374, -702,  226, 292, 1391,
    804,  906, -604, -820, -931,   72, 908,  299,
    164,  420,  230,  938,   10,   73, 184, -210,
   -220, -112, -472
 ]


  let timeViaAlpina4 = [
    1145, 1464,  981, 1003,  656, 1028,  662,  761,
     707,  901,  808,  970,  872,  803, 1327,  771,
     577,  739,  834,  692,  640,  636,  653,  924,
     668,  680,  826,  892, 1074, 1040,  649, 1032,
    1193,  867, 1251,  885,  898,  986,  768,  742,
     639,  953,  923,  940,  868,  903,  850,  741,
    1069, 1244, 1639, 1051, 1151,  824,  885
  ]
  let vertViaAlpina4 = [
     764, 1371,  539,  197,   43,  -279, -886,
     -17,  466,  626,  151,  308,  -712,  -59,
    1010, -203, -686, -348,  292,   -69, -318,
      89,  -36,  358,   30, -394,   125,  377,
     519,  137, -627,  364,  604,  -325,  741,
    -121, -325,   73, -184, -495,  -342,  223,
     437,  194, -118, -124, -512,    16,  177,
     584, 1090, -896,   39, -633, -1224
  ]




  let timeViaAlpina5 = [
    1097,  805,  957, 1522, 1590,  951,  721,
     904, 1507,  800,  958,  819,  892, 1259,
    1028, 1190, 1503, 1171,  909, 1076,  797,
    1018, 1016, 1104,  929,  917, 1405,  928,
    1359, 1287,  881, 1342, 1771, 1239, 1281,
    1166, 1066,  995,  883,  739,  700,  693,
     696,  601,  635
  ]
  let vertViaAlpina5 = [
      26,   89,  643, 1145,  728, -731, -404,
     -52,  981,  -20, -948, -427,  380,  975,
    -788,  437, 1289,  551, -115, -295, -243,
     282,  -59,  319, -834, -656,  801, -417,
     528,  515, -954,   82,  752,  400,  357,
     -55, -269,   -6, -355, -417, -552, -600,
    -669, -647, -475
  ]

  calculateVertMultiplier(vertNolans1, timeNolans1)
  calculateVertMultiplier(vertAzt2, timeAzt2)
  calculateVertMultiplier(vertAzt6, timeAzt6)
  calculateVertMultiplier(vertViaAlpina2, timeViaAlpina2)
  calculateVertMultiplier(vertViaAlpina4, timeViaAlpina4)
  calculateVertMultiplier(vertViaAlpina5, timeViaAlpina5)



    

// var toHHMMSS = (secs) => {
//     var sec_num = parseInt(secs, 10)
//     var hours   = Math.floor(sec_num / 3600)
//     var minutes = Math.floor(sec_num / 60) % 60
//     var seconds = sec_num % 60

//     return [hours,minutes,seconds]
//         .map(v => v < 10 ? "0" + v : v)
//         .filter((v,i) => v !== "00" || i > 0)
//         .join(":")
// }


function calculateVertMultiplier(vertArr, timeArr) {
    let result = []
    for (let i = 0; i < timeArr.length; i++) {
        let obj= {
            vert: Math.round(parseFloat(vertArr[i])),
            vertMod: paceEquation(vertArr[i], i, timeArr)
        }
        result.push(obj)
    }
    for (let i = 0; i < result.length; i++) {
        if(timeArr[i] < 2500 && result[i].vert !== NaN) {
            // console.log(result[i].vert,",", result[i].vertMod, timeArr[i])
            console.log(result[i].vert + ", " + result[i].vertMod)
        }
    }
    console.log("")
    return result;
}

function paceEquation(vert, index, timeArr) {
    //7 minute base pace
    let base = 420;
    let terrainMod = 1.1;

    for (let i = -3000; i < 3000; i += .001) {
        //if product makes the equation equal to the timeArr index, push it to the result
        let product = base * Math.pow(terrainMod, (vert / i))
        if(Math.abs(product - timeArr[index]) < .5) {
            return i;
        }
    }
}