//joe 50k
let timeJoe50k = [505, 500, 514, 570, 904, 1024, 1052, 486, 723, 919, 852, 700, 490, 1051, 906, 528, 949, 995, 651, 818, 619, 473, 491, 485, 377, 380, 362, 370, 367, 345, 337, 344];
let vertJoe50k = [16.404199999999946, 236.22047999999995, 301.83727999999996, 367.45408, 741.4698400000002, 862.8609200000001, 449.4750799999997, -580.7086799999997, 226.3779599999998, 675.85304, 711.9422800000002, -111.54856000000018, -544.6194400000004, 649.6063200000008, -22.965880000000652, -826.7716799999998, 305.1181200000001, 587.2703600000004, -721.7848000000004, 538.0577599999997, 45.931760000000395, -646.3254800000004, -734.9081599999995, -465.8792800000001, -354.3307199999999, -364.1732400000001, -400.26247999999987, -278.8714, -170.60368000000017, -328.08400000000006, -259.1863599999999, -19.685040000000072, 0]

let timeSpeedgoat = [
    534, 362, 693, 468,  524, 613,
    558, 550, 703, 384,  393, 612,
    388, 344, 423, 418,  437, 707,
    745, 808, 495, 822, 1154, 527,
    351, 811, 983, 507,  731, 333,
    395, 389
  ]
  let vertSpeedgoat = [
     573, -327,  824,  -15,   338,
     627,  -20,  440,  570,  -411,
    -879,  -35, -814, -784,  -192,
       9,  121,  702,  735,   745,
    -548,  619,  900, -426, -1035,
     510,  544, -670, -209,  -638,
    -848, -308
  ]

  let timeFranklin = [
    769, 393, 561, 368, 481, 498, 699,
    342, 507, 448, 667, 559, 740, 370,
    328, 326, 434, 501, 376, 375, 413,
    493, 472, 422, 487, 447, 448, 355,
    430, 481, 509, 459, 413
  ]
  let vertFranklin = [
    364, -306,  -53, -179, 284,  388,
    391, -451,  184,   42, 398,  517,
    840, -745, -720, -672, -20,  -46,
    -96, -222,  -95,  254,  64, -190,
    179,   34, -208, -306, -49,  152,
    144,   79,  -72
  ]

  let timeDirty30 = [
    420, 401,  634, 650, 377, 557,
    579, 633,  449, 410, 535, 494,
    653, 431,  704, 555, 556, 796,
    649, 493,  429, 660, 470, 430,
    453, 904, 1005, 477, 469, 560
  ]
  let vertDirty30 = [
     169,  -90,  568,  364, -320,  421,
     140,  468, -179, -367,  169,  -26,
     151, -114,   -7, -528, -150,  587,
     325,  -54, -444,  151, -389, -248,
    -314,  627,  392, -684, -350,   36
  ]

  let timeZaneGrey = [
    521, 696, 530, 516, 501, 525,
    519, 529, 622, 532, 583, 578,
    520, 498, 575, 537, 589, 558,
    536, 637, 638, 661, 746, 652,
    575, 525, 573, 730, 669, 493,
    604, 609
  ]
  let vertZaneGrey = [
     290,  633, -235,  -98, -132, -135,
     -32,  -49,  365,   90,  226,  120,
    -194,  -94,  141, -171,  -19,  163,
     -59,  263,  -38,   83,  159,   38,
     -50, -348,  -79,  240,  126, -284,
     -21,  -44
  ]

  let timeSonoma = [
    437, 363, 395, 487, 437, 439, 507, 488,
    453, 468, 405, 482, 392, 446, 433, 428,
    398, 413, 481, 345, 344, 508, 412, 362,
    401, 313, 382, 476, 423, 332, 454, 473,
    398, 496, 446, 534, 479, 537, 492, 493,
    483, 498, 513, 443, 490, 549, 441, 455
  ]
  let vertSonoma = [
     187,  -69, -247,  -65,   30, -112,  59, -85,
      49,    7,  -82,  161, -141,  138, -56, 145,
    -115,  -20,  459, -200, -328,  385, 173,  -8,
      31, -328, -258,  376,  108, -404,  52,  22,
    -136,   74, -143,  174, -169,  104, -10, -46,
      66,  -59,  135, -102,  -81,  281, -46,   0
  ]

  let timeOrd = [
    439, 447, 455, 423, 510, 419, 450, 480, 430,
    455, 461, 440, 395, 441, 435, 469, 434, 443,
    495, 462, 459, 506, 415, 415, 467, 432, 462,
    484, 533, 465, 450, 418, 479, 532, 482, 423,
    507, 546, 448, 372, 375, 429, 534, 418, 441,
    498, 470, 489, 508, 599, 463, 470, 424, 478,
    550, 518, 435, 496, 526
  ]
  let vertOrd = [
    -147, -106, -126, -272,  227, -292, -35,  123,  -26,
     242,   33,   64, -144,    7,   27,  99,  -98, -250,
     321, -246,   86,  168, -112,  -99,  84, -174,  -68,
     123,  194,   11,  -71, -209,   82, 371,   54, -161,
     179,  226, -179, -324, -164,   -6, 248, -102,  -94,
      70, -104, -164,   55,  358, -122,  47, -283,   48,
     338,  164, -113,   74,  187
  ]

  calculateVertMultiplier(vertJoe50k, timeJoe50k)
  calculateVertMultiplier(vertSpeedgoat, timeSpeedgoat)
  calculateVertMultiplier(vertDirty30, timeDirty30)
  calculateVertMultiplier(vertZaneGrey, timeZaneGrey)
  calculateVertMultiplier(vertFranklin, timeFranklin)
  calculateVertMultiplier(vertSonoma, timeSonoma)
  calculateVertMultiplier(vertOrd, timeOrd)
//   calculateVertMultiplier()

  
    // var toHHMMSS = (secs) => {
//     var sec_num = parseInt(secs, 10)
//     var hours   = Math.floor(sec_num / 3600)
//     var minutes = Math.floor(sec_num / 60) % 60
//     var seconds = sec_num % 60

//     return [hours,minutes,seconds]
//         .map(v => v < 10 ? "0" + v : v)
//         .filter((v,i) => v !== "00" || i > 0)
//         .join(":")
// }


function calculateVertMultiplier(vertArr, timeArr) {
    let result = []
    for (let i = 0; i < timeArr.length; i++) {
        let obj= {
            vert: parseFloat(vertArr[i].toFixed(1)),
            vertMod: paceEquation(vertArr[i], i, timeArr)
        }
        result.push(obj)
    }
    for (let i = 0; i < result.length; i++) {
        if(timeArr[i] < 2500) {
            // console.log(result[i].vert,",", result[i].vertMod, timeArr[i])
            console.log(result[i].vert + ", " + result[i].vertMod)
        }
    }
    console.log("")
    return result;
}

function paceEquation(vert, index, timeArr) {
    //7 minute base pace
    let base = 420;
    let terrainMod = 1.1;

    for (let i = -3000; i < 3000; i += .001) {
        //if product makes the equation equal to the timeArr index, push it to the result
        let product = base * Math.pow(terrainMod, (vert / i))
        if(Math.abs(product - timeArr[index]) < .1) {
            return i;
        }
    }
}